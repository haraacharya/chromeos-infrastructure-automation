description     "Intel MiniBAT"
author          "nitinx.dutt@intel.com"

start on starting system-services

script
	TEST_LOG_FILE="/var/log/intel_minibat_result.log"
	TEST_DEBUG_LOG="/var/log/intel_minibat_debug.log"
	TARGET_WARMBOOT_COUNT=1
	TARGET_COLDBOOT_COUNT=0
	TARGET_SUSPEND_COUNT=1
	SUSPEND_TIME=15
	
	#exit_LOOP=0
	#If you want to track kernel errors, keep it as 1 else make it 0.
	#Many just want to test fw and not interested in OS errors.
	TRACK_KERNEL_ERRORS=1
	#At the very beginning of project few features will not be enabled so skip the tests.
	TRACK_BT_CONTROLLER=1
	TRACK_CROSSYSTEM_ERRORS=1
    TRACK_CBMEM_ERRORS=0
	TRACK_ECTOOL_ERRORS=0

	#system_status_check is a function where in we can add any status check of system we want to in between tests we want to run.
	system_status_check()
	{
		#Check for boottime
		echo "STORING BOOT-TIME PERF DATA" >> $TEST_DEBUG_LOG
		/usr/bin/bootstat_summary >> $TEST_DEBUG_LOG
		if bootstat_summary | grep -i boot-complete; then
			echo "TEST STATUS: PASS(BOOTTIME)# $(bootstat_summary | grep -i boot-complete | grep -i 100%)" >> $TEST_LOG_FILE
		else
			echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE CHECKING BOOT TIME" >> $TEST_LOG_FILE
			echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
		fi
		echo "" >> $TEST_DEBUG_LOG	
		
		if [ $TRACK_CBMEM_ERRORS -eq 1 ]; then
			if which cbmem; then
				echo "STORING cbmem DATA" >> $TEST_DEBUG_LOG
				/usr/bin/cbmem -T >> $TEST_DEBUG_LOG
				if cbmem -T | grep -i jumping || cbmem -T | grep -i ACPI; then
					echo "TEST STATUS: PASS(cbmem DATA)# $(cbmem -T | grep -iE 'ACPI|jumping')" >> $TEST_LOG_FILE
				else
					echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE STORING cbmem DATA" >> $TEST_LOG_FILE
					echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
				fi
				echo "" >> $TEST_DEBUG_LOG
			else
				"cbmem COMMAND NOT FOUND. Ignoring test. N/A" >> $TEST_LOG_FILE
			fi
		fi	
		echo "END BOOTTIME CHECK" >> $TEST_DEBUG_LOG	
		
		#Check for battery status with every test
		if [ $TRACK_ECTOOL_ERRORS -eq 1 ]; then
			if which ectool; then
				if ! ectool battery | grep -i batt_present; then
					ectool battery >> $TEST_DEBUG_LOG
					echo "Getting all GPIOs" >> $TEST_DEBUG_LOG
					ectool gpioget >> $TEST_DEBUG_LOG
					echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE CHECKING BATTERY STATUS" >> $TEST_LOG_FILE
					echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
					sync
					#exit
				else
					echo " BATTERY DETECTION TEST: PASS(TESTED USING ECTOOL)" >> $TEST_LOG_FILE
				fi
			else
				"ectool COMMAND NOT FOUND. Ignoring test. N/A" >> $TEST_LOG_FILE
			fi
		fi	
		echo "END ECTOOL CHECK" >> $TEST_DEBUG_LOG	
		
		#check for crossystem errors
		if [ $TRACK_CROSSYSTEM_ERRORS -eq 1 ]; then 	
			crossystem_error=0
			no_of_crossystem_error_flags=`crossystem | grep -i error | wc -l`
			crossystem_error_string=`crossystem | grep -i error`

			if [ $no_of_crossystem_error_flags -gt 1 ]; then	    
				crossystem_error=1
			elif [ $no_of_crossystem_error_flags -eq 1 ]; then
				if echo $crossystem_error_string | grep -i recovery; then
					crossystem_error=0
				else
					crossystem_error=1
				fi
			else
				crossystem_error=0
			fi

			if [ $crossystem_error -eq 1 ]; then
				echo "crossystem has errors." >> $TEST_DEBUG_LOG
				echo $crossystem_error >> $TEST_DEBUG_LOG
				crossystem >> $TEST_DEBUG_LOG
				echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE CHECKING CROSSYSTEM ERRORS" >> $TEST_LOG_FILE
				echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
				sync
				#exit
			else
				echo "CROSSYSTEM ERROR CHECK TEST: PASS" >> $TEST_LOG_FILE
			fi
		fi
		
		echo "END CROSSYSTEM CHECK" >> $TEST_DEBUG_LOG
		
		#check for kernel errors 
		if [ $TRACK_KERNEL_ERRORS -eq 1 ]; then 	
			CUR_COUNT_KERNEL_ERROR=`dmesg --level=err | wc -l`
			. /var/log/kernel_error_count.sh
			COUNT_KERNEL_ERROR_STARTING_OF_TEST=$KERNEL_ERROR_COUNT
			if [ $CUR_COUNT_KERNEL_ERROR -gt $COUNT_KERNEL_ERROR_STARTING_OF_TEST ]; then
				echo `date` >> $TEST_DEBUG_LOG
				dmesg --level=err >> $TEST_DEBUG_LOG
				echo "Check for kernel errors before starting test in kernel_errors.txt" >> $TEST_DEBUG_LOG
				echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE CHECKING KERNEL ERRORS." >> $TEST_LOG_FILE
				echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
				sync
				#exit
			else
				echo "KERNEL NEW ERROR DETECTION DURING TEST: PASS(NO NEW ERRORS FOUND)" >> $TEST_LOG_FILE
			fi
		fi 
		
		echo "END KERNEL ERROR CHECK" >> $TEST_DEBUG_LOG
		
		#check for wifi...make it generic by giving the name as string instead of module name as 7265 or so
		if /usr/sbin/lspci | grep -i "intel corporation wireless"; then
			echo "WIFI DETECTION TEST: PASS" >> $TEST_DEBUG_LOG
			echo "WIFI DETECTION TEST: PASS" >> $TEST_LOG_FILE
			sync
		else
			echo `date` >> $TEST_DEBUG_LOG
			/usr/sbin/lspci >> $TEST_DEBUG_LOG
			echo "check the wifi pci device now" >> $TEST_DEBUG_LOG
			echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE CHECKING WIFI (LSPCI) STATUS" >> $TEST_LOG_FILE
			echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
			sync
			#exit
		fi
		
		echo "END LSPCI CHECK" >> $TEST_DEBUG_LOG
		
		#Chesk for BT
		bt_error=0
		if [ $TRACK_BT_CONTROLLER -eq 1 ]; then
			if dmesg | grep -i bluetooth; then
				hciconfig hci0 up
				if ! hciconfig | grep -i "up running"; then
					bt_error=1
				fi
				hciconfig hci0 down
				if ! hciconfig | grep -i "down"; then
					bt_error=1
				fi
			else
				echo `date` >> $TEST_DEBUG_LOG
				echo "DUMPING lsmod output to check if drivers loaded properly" >> $TEST_DEBUG_LOG
				lsmod >> $TEST_DEBUG_LOG
				if lsmod | grep -i btusb; then
					modinfo btusb >> $TEST_DEBUG_LOG
				fi
				echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE CHECKING BT STATUS" >> $TEST_LOG_FILE
				echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
				sync
				#exit
			fi
			if [ $bt_error -eq 1 ]; then
				echo "ADDING lsusb descriptors for further debug" >> $TEST_DEBUG_LOG
				lsusb -v >> $TEST_DEBUG_LOG
				echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE TESTING BT ENABLE-DISABLE" >> $TEST_LOG_FILE
				echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
				sync
				#exit
			else
				echo "BT TEST: PASS" >> $TEST_DEBUG_LOG
				echo "BT TEST: PASS" >> $TEST_LOG_FILE
				sync
			fi
		fi
		
		echo "END BT CHECK" >> $TEST_DEBUG_LOG
		
		#Track all connected/detected USB devices all through the test
		CUR_COUNT_USB_DEVICE=`lsusb | wc -l`
		. /var/log/usb_device_count.sh
		COUNT_USB_DEVICE_STARTING_OF_TEST=$USB_DEVICE_COUNT
		if [ $COUNT_USB_DEVICE_STARTING_OF_TEST -lt $CUR_COUNT_USB_DEVICE ]; then
			echo `date` >> $TEST_DEBUG_LOG
			lsusb >> $TEST_DEBUG_LOG
			echo "" >> $TEST_DEBUG_LOG
			echo dmesg | grep -i xhci >> $TEST_DEBUG_LOG
			echo "" >> $TEST_DEBUG_LOG
			echo dmesg | grep -i usb >> $TEST_DEBUG_LOG
			echo "Check list of USB devices before starting test in usb_device_list" >> $TEST_DEBUG_LOG
			echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0) WHILE CHECKING USB DEVICE LIST." >> $TEST_LOG_FILE
			echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
			sync
			#exit
		else
			echo "USB-LIST CHECK: PASS" >> $TEST_DEBUG_LOG
			echo "USB-LIST CHECK: PASS" >> $TEST_LOG_FILE
			sync
		fi
		
		echo "END USB DEVICE CHECK" >> $TEST_DEBUG_LOG
		#Check system display has come-up or not after every_test
		#yet to do
	}
	
	#Detect and store usb device list at the beginning of the test
	if [ ! -f /var/log/usb_device_list.txt ]; then
		lsusb > /var/log/usb_device_list.txt
		usb_device_count=`lsusb | wc -l`
		echo "USB_DEVICE_COUNT=$usb_device_count" > /var/log/usb_device_count.sh
		chmod +x /var/log/usb_device_count.sh
	fi
	#Detect and store kernel errors at the beginning of the test
	if [ ! -f /var/log/kernel_errors.txt ]; then
		dmesg --level=err > /var/log/kernel_errors.txt
		error_count=`dmesg --level=err | wc -l`
		echo "KERNEL_ERROR_COUNT=$error_count" > /var/log/kernel_error_count.sh
		chmod +x /var/log/kernel_error_count.sh
	fi
	
	#if system hangs or takes more time in between test cycle, #exit test. Track it by capturing time before and after reboot
	if [ ! -f /var/log/intel_time_before_test.sh ]; then
		time_before=`date +%s`
		echo "TIME_BEFORE_TEST=$time_before" > /var/log/intel_time_before_test.sh
		chmod +x /var/log/intel_time_before_test.sh
		sync
	else
		time_now=`date +%s`
		. /var/log/intel_time_before_test.sh
		time_before_reboot_test=$TIME_BEFORE_TEST
		time_diff=$(( $time_now - $time_before_reboot_test ))
		if [ $time_diff -gt 240 ]; then
			echo "It took more than usual time to complete the test." >> $TEST_DEBUG_LOG
			echo "System would have hanged during test cycling. And user would have interfered to switch it on using hard reset." >> $TEST_DEBUG_LOG
			echo "TEST STATUS: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
			#echo "#exitING INTEL-BAT TEST" >> $TEST_LOG_FILE
			sync
			#exit
		fi
	fi	
	
	if [ ! -f /var/log/warm_reboot_count.sh ]; then
		echo "**********TEST-1: WARM BOOT START*******************************************************" >> $TEST_LOG_FILE	
		echo "Warm Reboot Cycle Start:" `date` >> $TEST_DEBUG_LOG
		echo "Generate Initial Counter File" `date` >> $TEST_DEBUG_LOG
		echo "REBOOT_COUNT=0" > /var/log/warm_reboot_count.sh
		chmod +x /var/log/warm_reboot_count.sh
		sync
	fi

	# Read and update the counter for warm-boot
	. /var/log/warm_reboot_count.sh
	CUR_COUNT_WARM=$REBOOT_COUNT
	REBOOT_FLAG_WARM=$(($TARGET_WARMBOOT_COUNT+5))
	if [ $REBOOT_COUNT -ne 0 ] && [ $REBOOT_COUNT -ne $REBOOT_FLAG_WARM ]; then
		echo "<<<<<<<<<<<<<<<<SYSTEM CHECK AFTER WARM REBOOT>>>>>>>>>>>>>>>>>>>>>>" >> $TEST_LOG_FILE
		system_status_check
	fi

	if [ $CUR_COUNT_WARM -lt $TARGET_WARMBOOT_COUNT ]; then
		echo "<<<<<<<<<<<<<<<<SYSTEM CHECK BEFORE WARM REBOOT>>>>>>>>>>>>>>>>>>>>>>" >> $TEST_LOG_FILE
		system_status_check

		REBOOT_COUNT=$(($REBOOT_COUNT + 1))
		echo "Reboot Count: $CUR_COUNT_WARM" `date` >> $TEST_DEBUG_LOG
		echo "REBOOT_COUNT=$REBOOT_COUNT" > /var/log/warm_reboot_count.sh
		sync

		# Sleep for few seconds before next warm-boot cycle
		echo "Sleep 45 seconds" `date` >> $TEST_DEBUG_LOG
		sync; sync; sync
		sleep 45
		time_before=`date +%s`
		echo "TIME_BEFORE_TEST=$time_before" > /var/log/intel_time_before_test.sh
		sync
		reboot
		sleep 5	
		##exit
	fi
	if [ $CUR_COUNT_WARM -eq $TARGET_WARMBOOT_COUNT ]; then
		echo "WARMBOOT TEST: PASS" >> $TEST_LOG_FILE	
		echo "REBOOT_COUNT=$REBOOT_FLAG_WARM" > /var/log/warm_reboot_count.sh
	fi
	###################WARM-RBOOT END###################
    
	echo "END WARMBOOT CYCLE TEST" >> $TEST_DEBUG_LOG    
	if [ $TARGET_COLDBOOT_COUNT -gt 0 ]; then 
		if [ ! -f /var/log/cold_reboot_count.sh ]; then
			echo "**********TEST-2: COLD BOOT START*******************************************************" >> $TEST_LOG_FILE	
			echo "Cold boot Cycle Start:" `date` >> $TEST_DEBUG_LOG
			echo "Generate Initial Counter File" `date` >> $TEST_DEBUG_LOG
			echo "REBOOT_COUNT_COLD=0" > /var/log/cold_reboot_count.sh
			chmod +x /var/log/cold_reboot_count.sh
			sync
		fi

		. /var/log/cold_reboot_count.sh
		CUR_COUNT_COLD=$REBOOT_COUNT_COLD
		REBOOT_FLAG_COLD=$(($TARGET_COLDBOOT_COUNT+5))
		if [ $REBOOT_COUNT_COLD -ne 0 ] && [ $REBOOT_COUNT_COLD -ne $REBOOT_FLAG_COLD ]; then
			echo "<<<<<<<<<<<<<<<<SYSTEM CHECK AFTER COLD REBOOT>>>>>>>>>>>>>>>>>>>>>>" >> $TEST_LOG_FILE
			system_status_check
		fi
		if [ $CUR_COUNT_COLD -lt $TARGET_COLDBOOT_COUNT ]; then
			
			echo "<<<<<<<<<<<<<<<<SYSTEM CHECK BEFORE COLD REBOOT>>>>>>>>>>>>>>>>>>>>>>" >> $TEST_LOG_FILE
			system_status_check
			# Read and update the counter for cold-boot
			REBOOT_COUNT_COLD=$(($REBOOT_COUNT_COLD + 1))
			echo "Reboot Count: $CUR_COUNT_COLD" `date` >> $TEST_DEBUG_LOG
			echo "REBOOT_COUNT_COLD=$REBOOT_COUNT_COLD" > /var/log/cold_reboot_count.sh

			# Sleep for few seconds before next cold-boot cycle
			echo "Sleep 45 seconds" `date` >> $TEST_DEBUG_LOG
			sync; sync; sync
			sleep 45
			time_before=`date +%s`
			echo "TIME_BEFORE_TEST=$time_before" > /var/log/intel_time_before_test.sh
			sync
			ectool reboot_ec cold at-shutdown
			shutdown -h now
			sleep 5
		
		fi
		if [ $CUR_COUNT_COLD -eq $TARGET_COLDBOOT_COUNT ]; then
			echo "COLDBOOT TEST: PASS" >> $TEST_LOG_FILE
			echo "REBOOT_COUNT_COLD=$REBOOT_FLAG_COLD" > /var/log/cold_reboot_count.sh
		fi	
		
	fi
	###################COLD-RBOOT END###################
	
	echo "END COLDBOOT CYCLE TEST" >> $TEST_DEBUG_LOG
	###################SSUPEND-STRESS START###################
	if [ $TARGET_SUSPEND_COUNT -gt 0 ]; then 
		echo "ENTERING SUSPEND CYCLE TEST" >> $TEST_DEBUG_LOG
		while true; do
			if [ ! -f /var/log/suspend_test_count.sh ]; then
				echo "**********TEST-3: SUSPEND TEST START*******************************************************" >> $TEST_LOG_FILE	
				echo "Suspend test Cycle Start:" `date` >> $TEST_DEBUG_LOG
				echo "Generate Initial Counter File" `date` >> $TEST_DEBUG_LOG
				echo "SUSPEND_COUNT=0" > /var/log/suspend_test_count.sh
				chmod +x /var/log/suspend_test_count.sh
				sync
			fi
			suspend_cmd="powerd_dbus_suspend --delay=0"
			. /var/log/suspend_test_count.sh
			CUR_COUNT_SUSPEND=$SUSPEND_COUNT

			if [ $CUR_COUNT_SUSPEND -lt $TARGET_SUSPEND_COUNT ]; then

				# Read and update the counter for suspend-test
				SUSPEND_COUNT=$(($SUSPEND_COUNT + 1))
				echo "Suspend Count: $CUR_COUNT_SUSPEND" `date` >> $TEST_DEBUG_LOG
				echo "SUSPEND_COUNT=$SUSPEND_COUNT" > /var/log/suspend_test_count.sh

				# Sleep for few seconds before next suspend cycle
				echo "Sleep 15 seconds" `date` >> $TEST_DEBUG_LOG
				sync
				sleep 2
				time_before=`date +%s`
				echo "TIME_BEFORE_TEST=$time_before" > /var/log/intel_time_before_test.sh
				sync
				echo "+${SUSPEND_TIME}" > /sys/class/rtc/rtc0/wakealarm
				eval "$suspend_cmd"
				sleep 15
				system_status_check
			else
				#exit_LOOP=1
				break
			fi
		done
		
		if [ $CUR_COUNT_SUSPEND -eq $TARGET_SUSPEND_COUNT ]; then
			echo "SUSPEND TEST: PASS" >> $TEST_LOG_FILE
		fi	
	fi
	
	
	###################SSUPEND-STRESS START###################	 
	#TEST TOUCHPAD
	echo "TACKPAD TEST STARTED." >> $TEST_DEBUG_LOG
	if dmesg | grep -i touchpad; then
		touchpad=`dmesg | grep -i touchpad`
		touchpad=${touchpad%*/*/*}
		touchpad=${touchpad##*/}
		touchpad=${touchpad##*-}
		echo "touchpad string: $touchpad" >> $TEST_DEBUG_LOG
		touchpad_interrupt_string_before=`cat /proc/interrupts | grep -i $touchpad`
		touchpad_interrupt_count_before=`echo $touchpad_interrupt_string_before | cut -f2 -d' '`
		echo "touchpad interrupt count before: $touchpad_interrupt_count_before" >> $TEST_DEBUG_LOG
		sleep 4
		touchpad_interrupt_string_after=`cat /proc/interrupts | grep -i $touchpad`
		touchpad_interrupt_count_after=`echo $touchpad_interrupt_string_after | cut -f2 -d' '`
		echo "touchpad interrupt count after: $touchpad_interrupt_count_after" >> $TEST_DEBUG_LOG
		if [ $touchpad_interrupt_count_after -gt $touchpad_interrupt_count_before ]; then
			echo "TRACKPAD TEST: PASS" >> $TEST_LOG_FILE
		else
			echo "TRACKPAD TEST: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
		fi	
	else
		echo "TACKPAD NOT DETECTED IN DMESG." >> $TEST_DEBUG_LOG
		echo "TRACKPAD TEST: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
	fi
	
	#TEST TOUCHSCREEN
	echo "TOUCHSCREEN TEST STARTED." >> $TEST_DEBUG_LOG
	if dmesg | grep -i touchscreen; then
		touchscreen=`dmesg | grep -i touchscreen`
		touchscreen=${touchscreen%*/*/*}
		touchscreen=${touchscreen##*/}
		touchscreen=${touchscreen##*-}
		echo "touchscreen string: $touchscreen" >> $TEST_DEBUG_LOG
		touchscreen_interrupt_string_before=`cat /proc/interrupts | grep -i $touchscreen`
		touchscreen_interrupt_count_before=`echo $touchscreen_interrupt_string_before | cut -f2 -d' '`
		echo "touchscreen interrupt count before: $touchscreen_interrupt_count_before" >> $TEST_DEBUG_LOG
		sleep 4
		touchscreen_interrupt_string_after=`cat /proc/interrupts | grep -i $touchscreen`
		touchscreen_interrupt_count_after=`echo $touchscreen_interrupt_string_after | cut -f2 -d' '`
		echo "touchscreen interrupt count after: $touchscreen_interrupt_count_after" >> $TEST_DEBUG_LOG
		if [ $touchscreen_interrupt_count_after -gt $touchscreen_interrupt_count_before ]; then
			echo "TOUCHSCREEN TEST: PASS" >> $TEST_LOG_FILE
		else
			echo "TOUCHSCREEN TEST: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
		fi	
	else
		echo "TOUCHSCREEN NOT DETECTED IN DMESG." >> $TEST_DEBUG_LOG
		echo "TOUCHSCREEN TEST: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
	fi
	
	#TEST KEYBOARD
	if dmesg | grep -i i8042; then
		keyboard_interrupt_string_before=`cat /proc/interrupts | grep -i i8042`
		keyboard_interrupt_count_before=`echo $keyboard_interrupt_string_before | cut -f2 -d' '`
		sleep 4
		keyboard_interrupt_string_after=`cat /proc/interrupts | grep -i $touchscreen`
		keyboard_interrupt_count_after=`echo $keyboard_interrupt_string_after | cut -f2 -d' '`
		if [ $keyboard_interrupt_count_after -gt $keyboard_interrupt_count_before ]; then
			echo "KEYBOARD TEST: PASS" >> $TEST_LOG_FILE
		else
			echo "KEYBOARD TEST: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
		fi	
	else
		echo "KEYBOARD NOT DETECTED IN DMESG." >> $TEST_DEBUG_LOG
		echo "KEYBOARD TEST: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
	fi
	
	
	#TEST Mosys
	echo "**********TEST-4: MOSYS SUPPORT TEST START*******************************************************" >> $TEST_LOG_FILE
	if which mosys; then
		if mosys memory spd print timings; then
			echo "MOSYS MEMORY SPD INFO: PASS" >> $TEST_DEBUG_LOG
			echo "MOSYS TEST: PASS" >> $TEST_LOG_FILE
		else
			echo "MOSYS MEMORY SPD INFO: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_DEBUG_LOG
			echo "MOSYS TEST: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
			#exit
		fi
	else
		echo "MOSYS COMMAND NOT FOUND." >> $TEST_DEBUG_LOG
		echo "MOSYS TEST: $(tput setaf 1)FAIL$(tput sgr 0)" >> $TEST_LOG_FILE
	fi
	sync

	echo "" >> $TEST_LOG_FILE
	echo "*****END******" >> $TEST_LOG_FILE
end script

